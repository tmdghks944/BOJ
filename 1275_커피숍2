#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <functional>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <cmath>
#include <math.h>
#include <set>
#include <climits>
 
typedef long long ll;
 
using namespace std;
const int INF = 987654321;
typedef long long ll;
ll n, m;
ll arrsize=1;
vector<ll> arr;
vector<ll> maxtree;
 
void maxinput(ll pos, ll value)
{
    ll inputpos = pos + arrsize;
    maxtree[inputpos] = value;
    inputpos /= 2;
    while (inputpos > 0)
    {
        maxtree[inputpos] = maxtree[inputpos * 2] + maxtree[inputpos * 2 + 1];
        inputpos /= 2;
    }
}
ll maxsolution(ll a, ll b)
{
    ll ret = 0;
    ll lo = a + arrsize;
    ll hi = b + arrsize;
    while (lo <= hi)
    {
        if (lo % 2 == 1)    ret += maxtree[lo++];
        if (hi % 2 == 0)    ret += maxtree[hi--];
        lo /= 2;
        hi /= 2;
    }
    return ret;
}
int main()
{
#ifdef _CONSOLE
    freopen("input.txt", "r", stdin);
#endif
    scanf("%lld%lld", &n, &m);
    arr.resize(4 * n, LLONG_MAX);
    maxtree.resize(4 * n, 0);
    while (n > arrsize)
        arrsize *= 2;
    for (ll i = 0; i < n; i++)
    {
        ll tmp;
        scanf("%lld", &tmp);
        maxinput(i, tmp);
    }
    for (ll i = 0; i < m; i++)
    {
        ll a, b, c, d;
        scanf("%lld%lld%lld%lld", &a, &b,&c,&d);
        if (a < b)
        {
            printf("%lld\n", maxsolution(a - 1, b - 1));
        }
        else
        {
            printf("%lld\n", maxsolution(b - 1, a - 1));
        }
        maxinput(c - 1, d);
    }
}
