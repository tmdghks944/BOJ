#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <functional>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <cmath>
#include <climits>
#include <math.h>
#include <set>
 
using namespace std;
const int INF = 987654321;
const int MOD = 1000000000;
typedef long long ll;
int dp[1000001];
int n;
int solution(int pos)
{
    if (pos == 1)
        return 0;
    int& ret = dp[pos];
    if (ret != -1)return ret;
    ret = INF;
    if (pos % 3 == 0)ret = min(ret, solution(pos / 3) + 1);
    if (pos % 2 == 0)ret = min(ret, solution(pos / 2) + 1);
    ret = min(ret, solution(pos - 1) + 1);
    return ret;
}
int main()
{
#ifdef _CONSOLE
    freopen("input.txt", "r", stdin);
#endif
    memset(dp, -1, sizeof(dp));
    scanf("%d", &n);
    printf("%d\n", solution(n));
    int pos = n;
    vector<int> ans;
    ans.push_back(pos);
    while (pos!=1)
    {
        //1이 가장 작은 경우
        if (pos % 3 == 0)
        {
            if (pos % 2 == 0)
            {
                if (dp[pos / 3] < dp[pos / 2] && dp[pos / 3] < dp[pos - 1])
                {
                    ans.push_back(pos / 3);
                    pos /= 3;
                    continue;
                }
                else if (dp[pos / 2] < dp[pos / 3] && dp[pos / 2] < dp[pos - 1])
                {
                    ans.push_back(pos / 2);
                    pos /= 2;
                    continue;
                }
                else if (dp[pos - 1] < dp[pos / 3] && dp[pos - 1] < dp[pos / 2])
                {
                    ans.push_back(pos -1);
                    pos -= 1;
                    continue;
                }
            }
            else
            {
                if (dp[pos / 3] < dp[pos - 1])
                {
                    ans.push_back(pos / 3);
                    pos /= 3;
                    continue;
                }
                else
                {
                    ans.push_back(pos -1);
                    pos -= 1;
                    continue;
                }
            }
        }
        //2가 가장 작은 경우
        if (pos % 2 == 0)
        {
            if (dp[pos / 2] < dp[pos - 1])
            {
                ans.push_back(pos / 2);
                pos /= 2;
                continue;
            }
            else
            {
                ans.push_back(pos -1);
                pos -= 1;
                continue;
            }
        }
        //3이 가장 작은 경우
        ans.push_back(pos - 1);
        pos -= 1;
        continue;
    }
    int sizz = ans.size();
    for (int i = 0; i < sizz - 1; i++)
        printf("%d ", ans[i]);
    printf("%d\n", ans[sizz - 1]);
}
