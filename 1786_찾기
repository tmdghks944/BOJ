#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <functional>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <cmath>
#include <climits>
#include <math.h>
#include <set>
 
using namespace std;
typedef long long ll;
const int INF = 987654321;
const int MOD = 1000000;
vector<int> getPartialMatch(const string&N) {
    int m = N.size();
    vector<int> pi(m, 0);
    int begin = 1, matched = 0;
    while (begin + matched<m) {
        if (N[begin + matched] == N[matched]) {
            matched++;
            pi[begin + matched - 1] = matched;
        }
        else {
            if (matched == 0)
                begin++;
            else {
                begin += matched - pi[matched - 1];
                matched = pi[matched - 1];
            }
        }
    }
 
    return pi;
}
 
 
//부분 일치 함수를 이용한 kmp 함수
vector<int> kmpSearch(const string& H, const string& N) {
    int n = H.size(), m = N.size();
    vector<int>ret;
    vector<int> pi = getPartialMatch(N);
 
    int begin = 0, matched = 0;
    while (begin <= n - m) {
        if (matched<m && H[begin + matched] == N[matched]) {
            matched++;
            if (matched == m) ret.push_back(begin);
        }
        else {
            if (matched == 0)
                begin++;
            else {
                begin += matched - pi[matched - 1];
                matched = pi[matched - 1];
            }
        }
    }
 
    return ret;
}
int main()
{
#ifdef _CONSOLE
    freopen("input.txt", "r", stdin);
#endif
    string str1, str2;
    getline(cin, str1);
    getline(cin, str2);
     
    vector<int> tmp;
    tmp = kmpSearch(str1, str2);
    printf("%d\n", tmp.size());
    for (int i = 0; i < tmp.size(); i++)
        printf("%d\n", tmp[i]+1);
}
